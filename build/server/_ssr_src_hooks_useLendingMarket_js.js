"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_hooks_useLendingMarket_js";
exports.ids = ["_ssr_src_hooks_useLendingMarket_js"];
exports.modules = {

/***/ "(ssr)/./src/hooks/useLendingMarket.js":
/*!***************************************!*\
  !*** ./src/hooks/useLendingMarket.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.29_babel-plugin-m_c95555fbad7770586864ea7c7e11b268/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wagmi */ \"(ssr)/./node_modules/.pnpm/wagmi@2.15.4_@tanstack+quer_729fcb4a0522d7f2aaf48b18cf6bc4d7/node_modules/wagmi/dist/esm/hooks/useAccount.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wagmi */ \"(ssr)/./node_modules/.pnpm/wagmi@2.15.4_@tanstack+quer_729fcb4a0522d7f2aaf48b18cf6bc4d7/node_modules/wagmi/dist/esm/hooks/useChainId.js\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"(ssr)/./node_modules/.pnpm/wagmi@2.15.4_@tanstack+quer_729fcb4a0522d7f2aaf48b18cf6bc4d7/node_modules/wagmi/dist/esm/hooks/useWriteContract.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n// Sample ABI for the lending contract\nconst LENDING_POOL_ABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"asset\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"deposit\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"asset\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"withdraw\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"asset\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"borrow\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"asset\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"amount\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"repay\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n];\n// Lending pool addresses by chain\nconst LENDING_POOL_ADDRESSES = {\n    5003: \"0x1234567890123456789012345678901234567890\",\n    50002: \"0x0987654321098765432109876543210987654321\"\n};\n// Available assets for lending/borrowing\nconst AVAILABLE_ASSETS = [\n    {\n        symbol: \"MNT\",\n        name: \"Mantle\",\n        iconColor: \"#2196F3\",\n        chainId: 5003,\n        address: null,\n        apy: 0.94,\n        ltv: 0.7 // Loan to value ratio\n    },\n    {\n        symbol: \"PHR\",\n        name: \"Pharos\",\n        iconColor: \"#34C759\",\n        chainId: 50002,\n        address: null,\n        apy: 0.85,\n        ltv: 0.7\n    },\n    {\n        symbol: \"USDC\",\n        name: \"USD Coin\",\n        iconColor: \"#2775CA\",\n        chainId: 5003,\n        address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n        apy: 1.2,\n        ltv: 0.8\n    },\n    {\n        symbol: \"APTC\",\n        name: \"APT Casino Token\",\n        iconColor: \"#E04C95\",\n        chainId: 5003,\n        address: \"0x4Af5AE15A2F535a0e02A357a13F79F499F4bE1e3\",\n        apy: 6.03,\n        ltv: 0.5\n    }\n];\n/**\r\n * Hook to interact with the lending market\r\n */ const useLendingMarket = ()=>{\n    const { address, isConnected } = (0,wagmi__WEBPACK_IMPORTED_MODULE_1__.useAccount)();\n    const chainId = (0,wagmi__WEBPACK_IMPORTED_MODULE_2__.useChainId)();\n    const [marketData, setMarketData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        assets: [],\n        userDeposits: {},\n        userBorrows: {},\n        loading: true,\n        error: null\n    });\n    // Contract write hooks\n    const { writeContractAsync: writeContract, isPending } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useWriteContract)();\n    // Get lending pool address for current chain\n    const lendingPoolAddress = chainId ? LENDING_POOL_ADDRESSES[chainId] : undefined;\n    // Filter assets for current chain\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (chainId) {\n            const filteredAssets = AVAILABLE_ASSETS.filter((asset)=>asset.chainId === chainId || asset.chainId === 0 // 0 for chain-agnostic assets\n            );\n            // Simulate user balances - in production this would be fetched from the contract\n            const simulateUserData = ()=>{\n                const deposits = {};\n                const borrows = {};\n                filteredAssets.forEach((asset)=>{\n                    if (Math.random() > 0.5) {\n                        deposits[asset.symbol] = {\n                            amount: (Math.random() * 10).toFixed(4),\n                            value: (Math.random() * 1000).toFixed(2),\n                            apy: asset.apy\n                        };\n                    }\n                    if (Math.random() > 0.7) {\n                        borrows[asset.symbol] = {\n                            amount: (Math.random() * 5).toFixed(4),\n                            value: (Math.random() * 500).toFixed(2),\n                            interest: asset.apy + 2\n                        };\n                    }\n                });\n                return {\n                    deposits,\n                    borrows\n                };\n            };\n            const userData = isConnected ? simulateUserData() : {\n                deposits: {},\n                borrows: {}\n            };\n            setMarketData({\n                assets: filteredAssets,\n                userDeposits: userData.deposits,\n                userBorrows: userData.borrows,\n                loading: false,\n                error: null\n            });\n        }\n    }, [\n        chainId,\n        isConnected\n    ]);\n    // Function to deposit an asset\n    const depositAsset = async (asset, amount)=>{\n        if (!isConnected || !lendingPoolAddress) {\n            throw new Error(\"Wallet not connected or lending pool not available\");\n        }\n        try {\n            // For native token deposits, we need to handle differently\n            if (!asset.address) {\n                // This would be your deposit function for native token\n                // For now, we're just simulating success\n                return {\n                    success: true,\n                    hash: `0x${Math.random().toString(16).substring(2, 10)}`\n                };\n            }\n            // For ERC20 tokens\n            const txHash = await writeContract({\n                address: lendingPoolAddress,\n                abi: LENDING_POOL_ABI,\n                functionName: \"deposit\",\n                args: [\n                    asset.address,\n                    amount\n                ]\n            });\n            return {\n                success: true,\n                hash: txHash\n            };\n        } catch (error) {\n            console.error(\"Deposit error:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    // Function to withdraw an asset\n    const withdrawAsset = async (asset, amount)=>{\n        if (!isConnected || !lendingPoolAddress) {\n            throw new Error(\"Wallet not connected or lending pool not available\");\n        }\n        try {\n            const txHash = await writeContract({\n                address: lendingPoolAddress,\n                abi: LENDING_POOL_ABI,\n                functionName: \"withdraw\",\n                args: [\n                    asset.address || \"0x0000000000000000000000000000000000000000\",\n                    amount\n                ]\n            });\n            return {\n                success: true,\n                hash: txHash\n            };\n        } catch (error) {\n            console.error(\"Withdraw error:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    // Function to borrow an asset\n    const borrowAsset = async (asset, amount)=>{\n        if (!isConnected || !lendingPoolAddress) {\n            throw new Error(\"Wallet not connected or lending pool not available\");\n        }\n        try {\n            const txHash = await writeContract({\n                address: lendingPoolAddress,\n                abi: LENDING_POOL_ABI,\n                functionName: \"borrow\",\n                args: [\n                    asset.address || \"0x0000000000000000000000000000000000000000\",\n                    amount\n                ]\n            });\n            return {\n                success: true,\n                hash: txHash\n            };\n        } catch (error) {\n            console.error(\"Borrow error:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    // Function to repay a borrowed asset\n    const repayAsset = async (asset, amount)=>{\n        if (!isConnected || !lendingPoolAddress) {\n            throw new Error(\"Wallet not connected or lending pool not available\");\n        }\n        try {\n            const txHash = await writeContract({\n                address: lendingPoolAddress,\n                abi: LENDING_POOL_ABI,\n                functionName: \"repay\",\n                args: [\n                    asset.address || \"0x0000000000000000000000000000000000000000\",\n                    amount\n                ]\n            });\n            return {\n                success: true,\n                hash: txHash\n            };\n        } catch (error) {\n            console.error(\"Repay error:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    return {\n        ...marketData,\n        isPending,\n        depositAsset,\n        withdrawAsset,\n        borrowAsset,\n        repayAsset\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useLendingMarket);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/hooks/useLendingMarket.js\n");

/***/ })

};
;